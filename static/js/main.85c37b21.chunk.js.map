{"version":3,"sources":["Components/Filter/Filter.module.css","Components/ContactList/ContactList.module.css","redux/contact/contactActions.js","redux/contact/contactReducer.js","redux/store.js","redux/contact/contactOperations.js","redux/contact/contactSelectors.js","Components/ContactForm/ContactForm.js","Components/Filter/Filter.js","Components/ContactList/ContactList.js","App.js","index.js","Components/ContactForm/ContactForm.module.css"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContact","contacts","createReducer","contactsList","_","payload","state","filter","id","loading","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","contactReducer","devTools","process","axios","defaults","baseURL","contact","dispatch","post","then","data","catch","error","message","contactId","delete","get","getFilter","getAllContacts","getLoading","getVisibleContacts","createSelector","normalizeFilter","toLowerCase","name","toLocaleLowerCase","includes","ContactForm","number","changeData","e","currentTarget","value","setState","checkContact","props","normalizeName","some","submitContact","preventDefault","alert","onSubmit","reset","this","className","styles","formStyle","pointStyle","input","type","pattern","title","required","onChange","btn","Component","connect","contactOerations","target","findtext","ContactList","getContacts","length","map","deletebtn","onClick","deleteContact","contactOperations","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85c37b21.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"findtext\":\"Filter_findtext__309Bu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deletebtn\":\"ContactList_deletebtn__1bP4S\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactsSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactsError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const filterContact = createAction('contact/filter');\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  filterContact,\r\n} from './contactActions'; //toolkit\r\n\r\nimport contactsList from '../../data/contacts-list.json';\r\n\r\n// toolkit\r\n\r\nconst contacts = createReducer(contactsList, {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) => state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [filterContact]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n  loading,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'; // toolkit\r\n// import logger from 'redux-logger';\r\n\r\nimport { FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';\r\n\r\nimport contactReducer from './contact/contactReducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  // logger,\r\n]; //toolkit\r\n\r\n//store on toolkit\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import axios from 'axios';\r\n\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contactActions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  return axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(fetchContactsError(error.message)));\r\n};\r\n\r\nconst addContact = contact => dispatch => {\r\n  dispatch(addContactRequest());\r\n\r\n  return axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error.message)));\r\n};\r\n\r\nconst deleteContacts = contactId => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  return axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(deleteContactError(error.message)));\r\n};\r\n\r\nexport default { addContact, deleteContacts, fetchContacts };\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getAllContacts = state => state.contacts.contacts;\r\n\r\nexport const getLoading = state => state.contacts.loading;\r\n\r\nexport const getVisibleContacts = createSelector([getFilter, getAllContacts], (filter, contacts) => {\r\n  const normalizeFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(contact => contact.name.toLocaleLowerCase().includes(normalizeFilter));\r\n});\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactForm.module.css';\r\n\r\nimport { connect } from 'react-redux';\r\nimport contactOerations from '../../redux/contact/contactOperations';\r\nimport { getAllContacts } from '../../redux/contact/contactSelectors';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  changeData = e => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  checkContact = name => {\r\n    const contacts = this.props.contacts;\r\n\r\n    const normalizeName = name.toLowerCase();\r\n\r\n    return contacts.some(contact => contact.name.toLowerCase() === normalizeName);\r\n  };\r\n\r\n  submitContact = e => {\r\n    const { name } = this.state;\r\n    e.preventDefault();\r\n\r\n    if (this.checkContact(name)) {\r\n      alert(`${name} is already in contact`);\r\n      return;\r\n    }\r\n\r\n    this.props.onSubmit(this.state);\r\n\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form onSubmit={this.submitContact} className={styles.formStyle}>\r\n        <label className={styles.pointStyle}>\r\n          Name\r\n          <input\r\n            className={styles.input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={name}\r\n            onChange={this.changeData}\r\n          />\r\n        </label>\r\n        <label className={styles.pointStyle}>\r\n          Number\r\n          <input\r\n            className={styles.input}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n            required\r\n            value={number}\r\n            onChange={this.changeData}\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={styles.btn}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n  contacts: PropTypes.array.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: contact => dispatch(contactOerations.addContact(contact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Filter.module.css';\r\nimport { filterContact } from '../../redux/contact/contactActions';\r\nimport { getFilter } from '../../redux/contact/contactSelectors';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <label className={styles.findtext}>\r\n      Find contact by name\r\n      <input type=\"text\" value={value} onChange={onChange} />\r\n    </label>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({ value: getFilter(state) });\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(filterContact(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport contactOperations from '../../redux/contact/contactOperations';\r\nimport styles from './ContactList.module.css';\r\nimport { getLoading, getVisibleContacts } from '../../redux/contact/contactSelectors';\r\n\r\nclass ContactList extends Component {\r\n  state = {};\r\n\r\n  componentDidMount() {\r\n    this.props.getContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.props.loading && <h1>...</h1>}\r\n        <ul>\r\n          {this.props.contacts.length > 0 &&\r\n            this.props.contacts.map(({ id, name, number }) => (\r\n              <li key={id}>\r\n                {name}: {number}\r\n                <button className={styles.deletebtn} onClick={() => this.props.deleteContact(id)}>\r\n                  удалить\r\n                </button>\r\n              </li>\r\n            ))}\r\n        </ul>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: getVisibleContacts(state),\r\n  loading: getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: id => dispatch(contactOperations.deleteContacts(id)),\r\n  getContacts: () => dispatch(contactOperations.fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\n\nimport ContactForm from './Components/ContactForm';\nimport Filter from './Components/Filter';\nimport ContactList from './Components/ContactList';\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n// import { PersistGate } from 'redux-persist/integration/react';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formStyle\":\"ContactForm_formStyle__3O9fV\",\"pointStyle\":\"ContactForm_pointStyle__QHt7G\",\"btn\":\"ContactForm_btn__3H7dw\"};"],"sourceRoot":""}